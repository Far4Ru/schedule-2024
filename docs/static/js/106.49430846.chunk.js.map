{"version":3,"file":"static/js/106.49430846.chunk.js","mappings":"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","sources":["pages/Schedule/components/Card.tsx","pages/Schedule/Schedule.tsx"],"sourcesContent":["import \"../../../style/Card.css\"\nimport React from \"react\";\nimport { Lecture, WeekType } from \"../Schedule\";\n\ninterface CardConfig {\n    name: string\n    weekType: WeekType\n    lectures: Lecture[]\n    currentDay: string\n}\n\nconst Card: React.FC<CardConfig> = (props) => {\n\n  const compareWeekType = (lecture: Lecture, currentWeekType: WeekType) => {\n    const lectureWeekType = lecture.weekType === 'числитель' ? WeekType.EVEN : WeekType.ODD\n    return lectureWeekType === currentWeekType\n  }\n\n  const getCardContainer = () => {\n      return props.name === props.currentDay? 'today-card' : 'card'\n  }\n\n  return (\n    <div className=\"column\">\n        <div className={getCardContainer()}>\n        <h3>{props.name}</h3>\n\n        {props.lectures.filter(e => compareWeekType(e, props.weekType)).map((lecture) => (\n          <div className=\"inner-container\">\n              <p className=\"leftcolumn\">{lecture.time}</p>\n              <p className=\"middlecolumn\">{lecture.name} {lecture.type === 'лекция' ? '(Лек)' : '(Пр)'}<br /><text className=\"lecturer-name\">{lecture.lecturer}</text></p>\n              <p className=\"rightcolumn\">{lecture.classroom}</p>\n          </div>\n        ))}\n        </div>\n    </div>\n  )\n}\n\nexport default Card;\n","import \"../../style/Schedule.css\"\nimport React, { useState, useEffect }  from \"react\";\nimport Card from \"./components/Card\";\n\nexport interface Lecture {\n  weekType: string,\n  time: string,\n  name: string,\n  type: string,\n  lecturer: string,\n  classroom: string\n}\n\ninterface DataConfig {\n  name: string,\n  firstDay: string,\n  schedule: {\n    title: string\n    lectures: Lecture[]\n  }[]\n}\n\nexport enum WeekType {\n  ODD = 0,\n  EVEN = 1\n}\n\nconst Schedule: React.FC = () => { \n  const [data, setData] = useState<DataConfig>({ name: '', firstDay: '01.01.1970', schedule: []});\n  const [weekType, setWeekType] = useState<WeekType>(WeekType.ODD);\n  const [firstDay, setFirstDay] = useState<Date>(new Date());\n  const [today, setToday] = useState<Date>(new Date());\n\n  useEffect(\n    () => {\n      getData().then((res)=>{\n        setData(res)\n        setFirstDay(getFirstDay(res.firstDay))\n        setWeekType(getWeekType(today))\n      })\n    }, []\n  )\n\n  const getData = async () => {\n    const fetchData = await fetch('data.json')\n    const json = await fetchData.json()\n    return json\n  }\n\n  const getFirstDay = (day: string) => {\n    const dayArray = day.split('.')\n    return new Date(Date.parse(`${dayArray[1]}/${dayArray[0]}/${dayArray[2]}`))\n  }\n\n  const getWeekType = (date: Date) => {\n      const dateCopy = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()));\n      // Set to nearest Thursday: current date + 4 - current day number\n      // Make Sunday's day number 7\n      dateCopy.setUTCDate(dateCopy.getUTCDate() + 4 - (dateCopy.getUTCDay()||7));\n      // Calculate full weeks to nearest Thursday\n      const weekNumber: number = Math.ceil((((dateCopy.valueOf() - firstDay.valueOf()) / 86400000) + 1) / 7);\n      // Return week number\n      return weekNumber % 2 === 0 ? WeekType.EVEN : WeekType.ODD;\n  }\n\n  const todayFormated = () => {\n    const year = today.getFullYear()\n    const month = (today.getMonth() + 1).toString().padStart(2, \"0\");\n    const day   = today.getDate().toString().padStart(2, \"0\");\n    return `${day}.${month}.${year}`\n  }\n\n  const changeWeekType = (e: any) => {\n    const text: string = e.target.innerText\n    const newWeekType = text === 'числитель' ? WeekType.EVEN : WeekType.ODD\n    setWeekType(newWeekType)\n  }\n\n  const getCurrentDay = () => {\n    const weekday = [\"Воскресенье\",\"Понедельник\",\"Вторник\",\"Среда\",\"Четверг\",\"Пятница\",\"Суббота\"]\n\n    return getWeekType(today) === weekType ? weekday[today.getDay()] : ''\n  }\n\n  return (\n    <div className=\"schedule-container\">\n      <h2>Расписание</h2>\n      <p>{data.name}</p>\n      <p className=\"today-container\">{todayFormated()} - {getWeekType(today) === WeekType.EVEN ? 'числ.' : 'знам.'}</p>\n      <div className=\"switch-week-container\">\n        <button className={weekType === WeekType.EVEN ? 'switch-weel-button-selected' : 'switch-weel-button-unselected'} onClick={changeWeekType}>числитель</button>\n        <button className={weekType === WeekType.ODD ? 'switch-weel-button-selected' : 'switch-weel-button-unselected'} onClick={changeWeekType}>знаменатель</button>\n      </div>\n\n      <div className=\"row\">\n        {data.schedule.map((item) => (\n          <Card name={item.title} weekType={weekType} lectures={item.lectures} currentDay={getCurrentDay()}/>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Schedule;\n"],"names":["props","_jsx","className","children","_jsxs","name","currentDay","lectures","filter","e","compareWeekType","lecture","currentWeekType","weekType","WeekType","EVEN","ODD","map","time","type","lecturer","classroom","Schedule","data","setData","useState","firstDay","schedule","setWeekType","setFirstDay","Date","today","setToday","useEffect","getData","then","res","getFirstDay","getWeekType","async","fetchData","fetch","json","day","dayArray","split","parse","date","dateCopy","UTC","getFullYear","getMonth","getDate","setUTCDate","getUTCDate","getUTCDay","Math","ceil","valueOf","changeWeekType","newWeekType","target","innerText","todayFormated","year","month","toString","padStart","onClick","item","Card","title","getDay"],"sourceRoot":""}